GIT COMMANDS
------------------------------------------------------
git init

git status

git add									- untracked files which means newely current
git add . (. means current directory)	- same as above
git add --all							- same as above
git add -u 								- Tracked files 

git config --global user.name rajeshande
git config --global user.email rajesh.ande@live.com

git commit -m "message"

git log 

git remote add <remote repo name> <remote repository server id-ssh-https>

git push origin 

git push origin <branchname>
------------------------------------------------------

git reset --hard (this reset command works only on tracked files or files that are changes to commit)

git clean -fd (this clean command works only on untracked files which means files created but not yet add to staging area) (this command will clean those files)

git log (this log command will provide all the commit ID's)

git checkout <commit ID> (this command will reach to the changes that were at that commit ID, once we are done checking, we can go back to the master using )
git checkout master

Q - If our head is lookingout a commit ID which has no relation with the branch , that state is called as detached state - ?????
A : if the head is looking out a commit ID which is not longer a branch latest version which is called as detached state or warning state
	example : 	Master
					-> Branch 1
						-> CID 1
						-> CID 2
				head	-> CID 3
git checkout CID 1
				Master
					-> Branch 1
				head	-> CID 1
						-> commits missing
						-> commits missing
						
----------------------------------------------------------
GIT BRANCH - when ever we need a parllel development we create branches
----------------------------------------------------------
git branch

git checkout <branchname>

git branch -r

git branch -a	(all remote branches will start with remote/<branchname>
-----------------------------------------------------------
GIT Merge Conflict
-----------------------------------------------------------
when ever we are sending the changes from local to the remote repository, we always have to be with the latest repo at local other wise 
if there is any clash with in the same brach of same line item where you and others are working simultaniously, and other person push the changes to the 
remote repo and you try to sent merge conflit will appear beacuse
your head is not at the latest point.
head always looks at the latest commit ID, since there was a commit id by another person heads moves to the new location, so inorder to get the change 
use git pull <> <> commans and update your local repo then push.










