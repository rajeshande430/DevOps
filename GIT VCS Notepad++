GIT COMMANDS
------------------------------------------------------
git init

git status

git add									- untracked files which means newely current
git add . (. means current directory)	- same as above
git add --all							- same as above
git add -u 								- Tracked files 

git config --list (to check the all the branches)
git config --global user.name rajeshande
git config --global user.email rajesh.ande@live.com

git commit -m "message"

git log 

git remote add <remote repo name> <remote repository server id-ssh-https>

git push origin 

git push origin <branchname>
------------------------------------------------------

git reset --hard (this reset command works only on tracked files or files that are changes to commit)

git clean -fd (this clean command works only on untracked files which means files created but not yet add to staging area) (this command will clean those files)

git log (this log command will provide all the commit ID's)

git checkout <commit ID> (this command will reach to the changes that were at that commit ID, once we are done checking, we can go back to the master using )
git checkout master

Q - If our head is lookingout a commit ID which has no relation with the branch , that state is called as detached state - ?????
A : if the head is looking out a commit ID which is not longer a branch latest version which is called as detached state or warning state
	example : 	Master
					-> Branch 1
						-> CID 1
						-> CID 2
				head	-> CID 3
git checkout CID 1
				Master
					-> Branch 1
				head	-> CID 1
						-> commits missing
						-> commits missing
						
----------------------------------------------------------
GIT BRANCH - when ever we need a parllel development we create branches
----------------------------------------------------------
git branch

git checkout <branchname>

git branch -r

git branch -a	(all remote branches will start with remote/<branchname>
-----------------------------------------------------------
GIT Merge Conflict
-----------------------------------------------------------
when ever we are sending the changes from local to the remote repository, we always have to be with the latest repo at local other wise 
if there is any clash with in the same brach of same line item where you and others are working simultaniously, and other person push the changes to the 
remote repo and you try to sent merge conflit will appear beacuse
your head is not at the latest point.
head always looks at the latest commit ID, since there was a commit id by another person heads moves to the new location, so inorder to get the change 
use git pull <> <> commans and update your local repo then push.

----------------------------------------------------------------------------
HASHING ALGORITHEM
----------------------------------------------------------------------------
Hashing algorithem is something whenever you give some text, we get some CODE and that code remains same as long as the text remains same
if we make a small change, automatically numbers changes even if the change is very very small
Hashing algorithem runs in git i.e sha1 

COMMIT ID is a hashing algorithem, commit id is a combination of
		the changes made
		authors name
		date and time
		commit message
					{
						user@LAE20026 MINGW64 ~/Desktop/GIT VCS/DevOps (gitvcs)
						$ git log
						commit 29d180c843d7c84f5b2f65cc1c7a3acdf7d292a6 (HEAD -> gitvcs, origin/gitvcs)
						Author: RajeshAnde <rajesh.ande@live.com>
						Date:   Sun Aug 25 11:08:14 2019 +0400

							HASHING algorithem + nootepad +

						commit ab1c42898631264d899586dada9bf1658d6c540f (master)
						Author: RajeshAnde <rajesh.ande@live.com>
						Date:   Sat Aug 24 16:59:59 2019 +0400

						2 GIT COMMIT ID CONCEPT JPEG + GIT COMMANDS NOTEPAD++ DOC
					}
					{
						git cat-file -p 29d180c843d7c84f5b2f65cc1c7a3acdf7d292a6
						$ git cat-file -p 29d180c843d7c84f5b2f65cc1c7a3acdf7d292a6
						tree 1c46e4041a46d9e6695c03813f3831963ba54d02
						parent ab1c42898631264d899586dada9bf1658d6c540f
						author RajeshAnde <rajesh.ande@live.com> 1566716894 +0400
						committer RajeshAnde <rajesh.ande@live.com> 1566716894 +0400

						HASHING algorithem + nootepad +
					}
ADVANTAGE OF GIT
			if create copys of files which has the same content, each file is 1KB, when we commit git will save under one commit ID 
			because all files remains same, git will use only 1 memory as long as the files and content remains same.
			
what ever we are working, everything will be saved under .git folder

when ever we do git pull or push only .git folder travels from local to remote repo and .git folder knows what content has to be populated.

git clone "https://......."


